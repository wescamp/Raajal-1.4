disallow_recall=yes
next_scenario=null
victory_when_enemies_defeated=no
map_data="{@campaigns/Raajal/maps/Randalf_Training.map}"
turns=24
{UNDERGROUND}

[music]
	name=knalgan_theme.ogg
[/music]

[side]
	side=1
	team_name=good
	controller=human
	no_leader=yes
[/side]

[side]
	side=2
	team_name=bad
	controller=null
	no_leader=yes
[/side]

[side]
	side=3
	team_name=good
	controller=null
	no_leader=yes
[/side]

[side]
	side=4
	team_name=bad
	controller=ai
	no_leader=yes
[/side]

#define SHOW_OBJECTIVE
	[if]
		[variable]
			name=puzzle
			equals=3
		[/variable]
		[then]
			[objectives]
				summary="Recruit skeletons (right click and select "recruit skeleton") on all road terrain so that each skeleton type appears once per row, once per column, and once per group."
				note="Notes:
  1) Units on wrong hexes must be killed
  2) You have infinite moves until you attack
  3) To restart, move to the puzzle entrance bridge"
			[/objectives]
		[/then]
		[else]
			[if]
				[variable]
					name=puzzle
					equals=2
				[/variable]
				[then]
					[objectives]
						summary="Sort the skull numerals"
						note="Notes:
  1) Kill a skeleton to move across its bridge
  2) You have infinite attacks until a skeleton survives
  3) To restart, move to the puzzle entrance bridge"
					[/objectives]
				[/then]
				[else]
					[objectives]
						summary="Move each spider to a web."
						note="Notes:
  1) Attack a spider to move it one hex forward
  2) You have infinite moves and attacks until you make a mistake
  3) To restart, move to the puzzle entrance bridge"
					[/objectives]
				[/else]
			[/if]
		[/else]
	[/if]
#enddef

#define END_RANDALF
	{VARIABLE_OP next_level format (Day$day_number|_Theomund)}

	#If Theomund finished his mission, go to the Red Sea
	[if]
		[variable]
			name=orcs_arrive_hour
			greater_than=0
		[/variable]
		[or]
			[variable]
				name=theomund_failed
				equals=yes
			[/variable]
		[/or]
		[then]
			{VARIABLE_OP next_level format ($next_pref|_Red_Sea)}
		[/then]
	[/if]

	[endlevel]
		result=continue
		next_scenario=$next_level
	[/endlevel]
#enddef

#define NEXT_PUZZLE
	{VARIABLE_OP puzzle add 1}

	#Victory when Randalf finishes all puzzles
	[if]
		[variable]
			name=puzzle
			equals=4
		[/variable]
		[then]
			{END_RANDALF}
		[/then]
	[/if]
#enddef

[event]
	name=prestart

	{SHOW_OBJECTIVE}

	#Sokoban
	{PLACE_IMAGE misc/sokoban-web.png 31 17}
	{PLACE_IMAGE misc/sokoban-web.png 33 16}
	{PLACE_IMAGE misc/sokoban-web.png 33 19}
	{PLACE_IMAGE misc/sokoban-web.png 36 16}
	{PLACE_IMAGE misc/sokoban-web.png 35 20}
	{PLACE_IMAGE misc/sokoban-web.png 38 17}
	{PLACE_IMAGE misc/sokoban-web.png 37 20}
	{PLACE_IMAGE misc/sokoban-web.png 39 19}

	{FOREACH randalf_training_store i}
		[unstore_unit]
			variable=randalf_training_store[$i]
		[/unstore_unit]
	{NEXT i}

	#The sudoku menu is only visible when puzzle=3
	[set_menu_item]
		id=recruit
		description="Recruit a skeleton"
		[show_if]
			[not]
				[have_unit]
					x=$x1
					y=$y1
				[/have_unit]
			[/not]
			[variable]
				name=puzzle
				equals=3
			[/variable]
		[/show_if]
		[filter_location]
			terrain=Rr
		[/filter_location]
		[command]
			[if]
				[variable]
					name=sudoku_can_recruit
					equals=yes
				[/variable]
				[then]
					[message]
						speaker=narrator
						caption="Select a unit to recruit."
						[option]
							message= _ "Skeleton"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 Skeleton}
							[/command]
						[/option]
						[option]
							message= _ "Skeleton Archer"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 (Skeleton Archer)}
							[/command]
						[/option]
						[option]
							message= _ "Chocobone"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 Chocobone}
							[/command]
						[/option]
						[option]
							message= _ "Bone Shooter"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 (Bone Shooter)}
							[/command]
						[/option]
						[option]
							message= _ "Revenant"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 Revenant}
							[/command]
						[/option]
						[option]
							message= _ "Deathblade"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 Deathblade}
							[/command]
						[/option]
						[option]
							message= _ "Death Knight"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 (Death Knight)}
							[/command]
						[/option]
						[option]
							message= _ "Draug"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 Draug}
							[/command]
						[/option]
						[option]
							message= _ "Skeletal Dragon"
							[command]
								{CREATE_SUDOKU_SKELETON $x1 $y1 (Skeletal Dragon)}
							[/command]
						[/option]
					[/message]
		
					#Check if Randalf was victorious
					{STORE_UNITS store (
						side=1
						[not]
							description=Randalf
						[/not]) no}
					[if]
						[variable]
							name=store.length
							equals=81
						[/variable]
						[then]
							[kill]
								side=1
								[not]
									description=Randalf
								[/not]
								animate=yes
							[/kill]
							{NEXT_PUZZLE} #Victory
						[/then]
					[/if]
					{CLEAR_VARIABLE store}
				[/then]
				[else]
					[message]
						speaker=narrator
						caption="Select a unit to recruit."
						message= _ "No skeletons available until next turn."
					[/message]
				[/else]
			[/if]
		[/command]
	[/set_menu_item]
[/event]

#define CREATE_SUDOKU_SKELETON X Y TYPE
	{VARIABLE x ({X})}
	{VARIABLE y ({Y})}

	#Skeleton will be on your side if it is the correct hex
	{VARIABLE side 4}
	{VARIABLE_OP var format sudoku_x$x|y$y}
	[if]
		[variable]
			name=$var
			equals={TYPE}
		[/variable]
		[then]
			{VARIABLE side 1}
		[/then]
	[/if]

	[unit]
		type={TYPE}
		x=$x
		y=$y
		side=$side
	[/unit]
	{MODIFY_UNIT (
		x=$x
		y=$y) movement_costs.shallow_water 50}
	{MODIFY_UNIT (
		x=$x
		y=$y) movement_costs.grassland 50}

	[if]
		[variable]
			name=side
			equals=4
		[/variable]
		[then]
			{VARIABLE sudoku_can_recruit no}
		[/then]
	[/if]
#enddef

#define SET_SUDOKU_HEX LOCATION_INDEX NUMBER SHOW
	{VARIABLE_OP sudoku_x to_variable (sudoku_locs[{LOCATION_INDEX}].x)}
	{VARIABLE_OP sudoku_y to_variable (sudoku_locs[{LOCATION_INDEX}].y)}
	{VARIABLE_OP type to_variable (sudoku_unit_{NUMBER})}

	{VARIABLE show ({SHOW})}
	{VARIABLE_OP var format sudoku_x$sudoku_x|y$sudoku_y}
	{VARIABLE $var $type}
	[if]
		[variable]
			name=show
			equals=yes
		[/variable]
		[then]
			{CREATE_SUDOKU_SKELETON $sudoku_x $sudoku_y $type}
		[/then]
	[/if]
	{CLEAR_VARIABLE sudoku_x}
	{CLEAR_VARIABLE sudoku_y}
	{CLEAR_VARIABLE show}
#enddef

#define LOAD_SUDOKU1
	#Set (1,1)
	{SET_SUDOKU_HEX 0 4 no}
	{SET_SUDOKU_HEX 1 5 no}
	{SET_SUDOKU_HEX 2 9 no}
	{SET_SUDOKU_HEX 3 7 yes}
	{SET_SUDOKU_HEX 4 1 yes}
	{SET_SUDOKU_HEX 5 2 no}
	{SET_SUDOKU_HEX 6 3 yes}
	{SET_SUDOKU_HEX 7 6 yes}
	{SET_SUDOKU_HEX 9 8 no}

	#Set (2,1)
	{SET_SUDOKU_HEX 8 9 yes}
	{SET_SUDOKU_HEX 11 8 no}
	{SET_SUDOKU_HEX 12 7 no}
	{SET_SUDOKU_HEX 15 2 no}
	{SET_SUDOKU_HEX 16 4 yes}
	{SET_SUDOKU_HEX 17 5 yes}
	{SET_SUDOKU_HEX 21 6 yes}
	{SET_SUDOKU_HEX 22 1 yes}
	{SET_SUDOKU_HEX 26 3 no}

	#Set (3,1)
	{SET_SUDOKU_HEX 25 3 yes}
	{SET_SUDOKU_HEX 30 1 no}
	{SET_SUDOKU_HEX 31 8 no}
	{SET_SUDOKU_HEX 36 6 no}
	{SET_SUDOKU_HEX 37 5 no}
	{SET_SUDOKU_HEX 38 4 yes}
	{SET_SUDOKU_HEX 45 2 yes}
	{SET_SUDOKU_HEX 46 7 no}
	{SET_SUDOKU_HEX 51 9 yes}

	#Set (1,2)
	{SET_SUDOKU_HEX 10 6 yes}
	{SET_SUDOKU_HEX 13 2 no}
	{SET_SUDOKU_HEX 14 7 no}
	{SET_SUDOKU_HEX 18 9 yes}
	{SET_SUDOKU_HEX 19 3 yes}
	{SET_SUDOKU_HEX 20 5 no}
	{SET_SUDOKU_HEX 23 4 no}
	{SET_SUDOKU_HEX 24 8 no}
	{SET_SUDOKU_HEX 28 1 no}

	#Set (2,2)
	{SET_SUDOKU_HEX 27 4 yes}
	{SET_SUDOKU_HEX 32 5 no}
	{SET_SUDOKU_HEX 33 6 no}
	{SET_SUDOKU_HEX 39 8 yes}
	{SET_SUDOKU_HEX 40 2 no}
	{SET_SUDOKU_HEX 41 3 yes}
	{SET_SUDOKU_HEX 47 1 no}
	{SET_SUDOKU_HEX 48 9 no}
	{SET_SUDOKU_HEX 53 7 yes}

	#Set (3,2)
	{SET_SUDOKU_HEX 52 1 no}
	{SET_SUDOKU_HEX 56 3 no}
	{SET_SUDOKU_HEX 57 9 no}
	{SET_SUDOKU_HEX 60 7 no}
	{SET_SUDOKU_HEX 61 8 yes}
	{SET_SUDOKU_HEX 62 2 yes}
	{SET_SUDOKU_HEX 66 5 no}
	{SET_SUDOKU_HEX 67 6 no}
	{SET_SUDOKU_HEX 70 4 yes}

	#Set (1,3)
	{SET_SUDOKU_HEX 29 8 yes}
	{SET_SUDOKU_HEX 34 4 no}
	{SET_SUDOKU_HEX 35 3 yes}
	{SET_SUDOKU_HEX 42 5 yes}
	{SET_SUDOKU_HEX 43 9 no}
	{SET_SUDOKU_HEX 44 1 no}
	{SET_SUDOKU_HEX 49 2 no}
	{SET_SUDOKU_HEX 50 7 no}
	{SET_SUDOKU_HEX 55 6 yes}

	#Set (2,3)
	{SET_SUDOKU_HEX 54 1 no}
	{SET_SUDOKU_HEX 58 6 yes}
	{SET_SUDOKU_HEX 59 8 yes}
	{SET_SUDOKU_HEX 63 9 yes}
	{SET_SUDOKU_HEX 64 7 yes}
	{SET_SUDOKU_HEX 65 2 no}
	{SET_SUDOKU_HEX 68 5 no}
	{SET_SUDOKU_HEX 69 3 no}
	{SET_SUDOKU_HEX 72 4 yes}

	#Set (3,3)
	{SET_SUDOKU_HEX 71 7 no}
	{SET_SUDOKU_HEX 73 2 yes}
	{SET_SUDOKU_HEX 74 6 yes}
	{SET_SUDOKU_HEX 75 3 no}
	{SET_SUDOKU_HEX 76 4 yes}
	{SET_SUDOKU_HEX 77 5 yes}
	{SET_SUDOKU_HEX 78 1 no}
	{SET_SUDOKU_HEX 79 9 no}
	{SET_SUDOKU_HEX 80 8 no}

#enddef

#define CREATE_SOKOBAN_SPIDER X Y
	[unit]
		side=2
		type=Giant Spider
		x={X}
		y={Y}
	[/unit]
#enddef

#define EIGHT_SKELETON_SPAWN

	[kill]
		side=2
		x,y=25-31,13-16
	[/kill]

	[store_locations]
		variable=locs
		terrain=Qxu^BsV*
		[not]
			x,y=25,13 #bridge leading to sudoku
		[/not]
		[and]
			x=$eight_randalf.x
			y=$eight_randalf.y
			radius=1
		[/and]
	[/store_locations]

	{FOREACH locs i}
		{VARIABLE_OP x to_variable locs[$i].x}
		{VARIABLE_OP y to_variable locs[$i].y}
		{NOTRAIT_UNIT 2 (Skeleton Archer) $x $y}
	{NEXT i}

#enddef

#define SHOW_EIGHT_IMAGE X Y
	{VARIABLE x ({X})}
	{VARIABLE y ({Y})}
	{VARIABLE_OP value to_variable eight_x$x|y$y}

	#The terrain is blood void if the value > 0, cave floor otherwise
	[if]
		[variable]
			name=value
			equals=0
		[/variable]
		[then]
			{VARIABLE eight_randalf.x $x}
			{VARIABLE eight_randalf.y $y}
			{VARIABLE terrain Uu^Vu}
		[/then]
		[else]
			{VARIABLE terrain Y3}
		[/else]
	[/if]

	#Change the terrain if it is not what it should be
	[if]
		[not]
			[have_location]
				x=$x
				y=$y
				terrain=$terrain
			[/have_location]
		[/not]
		[then]
			[terrain]
				x=$x
				y=$y
				terrain=$terrain
			[/terrain]
		[/then]
	[/if]

	#Remove the old image
	[removeitem]
		x=$x
		y=$y
	[/removeitem]

	#Show the roman numeral image
	[if]
		[variable]
			name=value
			greater_than=0
		[/variable]
		[then]
			{VARIABLE_OP img format misc/8puzzle-$value|.png}
			{PLACE_IMAGE $img $x $y}
			{CLEAR_VARIABLE img}
		[/then]
	[/if]

	{CLEAR_VARIABLE x}	
	{CLEAR_VARIABLE y}
	{CLEAR_VARIABLE value}
#enddef

#define SET_EIGHT_HEX X Y VALUE
	{VARIABLE x ({X})}
	{VARIABLE y ({Y})}

	#Store the value in a variable
	{VARIABLE_OP var format eight_x$x|y$y}
	{VARIABLE $var ({VALUE})}

	{SHOW_EIGHT_IMAGE ({X}) ({Y})}	

	{CLEAR_VARIABLE x}	
	{CLEAR_VARIABLE y}
#enddef

#8-puzzle prestart: Show the images and set the terrains 
[event]
	name=prestart
	[if]
		[variable]
			name=puzzle
			equals=2
		[/variable]
		[then]
			{SHOW_EIGHT_IMAGE 32 14}
			{SHOW_EIGHT_IMAGE 24 14}
			{SHOW_EIGHT_IMAGE 26 13}
			{SHOW_EIGHT_IMAGE 28 12}
			{SHOW_EIGHT_IMAGE 26 15}
			{SHOW_EIGHT_IMAGE 28 14}
			{SHOW_EIGHT_IMAGE 30 13}
			{SHOW_EIGHT_IMAGE 28 16}
			{SHOW_EIGHT_IMAGE 30 15}
		[/then]
	[/if]
[/event]

#Move to a puzzle entrance bridge to restart the puzzle
[event]
	name=moveto
	first_time_only=no
	[filter]
		description=Randalf
		x,y=25,13
	[/filter]
	[if]
		[variable]
			name=puzzle
			equals=3
		[/variable]
		[then]
			{INIT_SUDOKU}
		[/then]
	[/if]
[/event]
[event]
	name=moveto
	first_time_only=no
	[filter]
		description=Randalf
		x,y=31,16
	[/filter]
	[if]
		[variable]
			name=puzzle
			equals=2
		[/variable]
		[then]
			{INIT_EIGHT_PUZZLE}
		[/then]
	[/if]
[/event]
[event]
	name=moveto
	first_time_only=no
	[filter]
		description=Randalf
		x,y=39,20
	[/filter]
	[if]
		[variable]
			name=puzzle
			equals=1
		[/variable]
		[then]
			{INIT_SOKOBAN}
		[/then]
	[/if]
[/event]

#define TEMP_TERRAIN_CHANGE X Y TERRAIN_OLD TERRAIN_NEW WML
	[terrain]
		x={X}
		y={Y}
		terrain={TERRAIN_NEW}
	[/terrain]
	[redraw] [/redraw]

	{WML}

	[terrain]
		x={X}
		y={Y}
		terrain={TERRAIN_OLD}
	[/terrain]
	[redraw] [/redraw]
#enddef

#define EIGHT_SWAP BRIDGE_X BRIDGE_Y
	#Store the nonempty hex across the bridge
	[store_locations]
		variable=locs
		terrain=Y3
		[and]
			x={BRIDGE_X}
			y={BRIDGE_Y}
			radius=1
		[/and]
	[/store_locations]

	{VARIABLE x_swap $locs[0].x}
	{VARIABLE y_swap $locs[0].y}
	{VARIABLE_OP value_swap to_variable eight_x$x_swap|y$y_swap}

	{SET_EIGHT_HEX $eight_randalf.x $eight_randalf.y $value_swap}
	{SET_EIGHT_HEX $x_swap $y_swap 0}
#enddef

[event]
	name=last breath
	[filter]
		side=2
		[filter_location]
			terrain=Qxu^BsV
		[/filter_location]
	[/filter]
	{EIGHT_SWAP $x1 $y1}
[/event]

#Eight: when you kill a skeleton, you move across his bridge
[event]
	name=die
	first_time_only=no
	[filter]
		side=2
		[filter_location]
			terrain=Qxu^BsV*
		[/filter_location]
	[/filter]

	#Kill skeletons	
	[kill]
		side=2
		x,y=25-31,13-16
	[/kill]

	#Make bridge passable and move Randalf onto it
	[if]
		[have_location]
			x=$x1
			y=$y1
			terrain=Qxu^BsV\
		[/have_location]
		[then]
			[terrain]
				x=$x1
				y=$y1
				terrain=Qxu^Bs\
			[/terrain]
		[/then]
		[else]
			[terrain]
				x=$x1
				y=$y1
				terrain=Qxu^Bs/
			[/terrain]
		[/else]
	[/if]
	[redraw] [/redraw]
	{MOVE_UNIT (description=Randalf) $x1 $y1}

	#Swap hexes
	{EIGHT_SWAP $x1 $y1}

	[redraw] [/redraw]
	[delay]
		time=500
	[/delay]

	#Move Randalf to his new location
	{MOVE_UNIT (description=Randalf) $eight_randalf.x $eight_randalf.y}

	#Change terrain back
	[if]
		[have_location]
			x=$x1
			y=$y1
			terrain=Qxu^Bs\
		[/have_location]
		[then]
			[terrain]
				x=$x1
				y=$y1
				terrain=Qxu^BsV\
			[/terrain]
		[/then]
		[else]
			[terrain]
				x=$x1
				y=$y1
				terrain=Qxu^BsV/
			[/terrain]
		[/else]
	[/if]

	#Spawn skeletons
	{EIGHT_SKELETON_SPAWN}

	#Randalf can move again if he killed the skeleton
	{MODIFY_UNIT (description=Randalf) moves 20}
	{MODIFY_UNIT (description=Randalf) attacks_left 1}

	#If skulls are in order, go to sudoku
	[if]
		[variable]
			name=eight_x24y14
			equals=1
		[/variable]
		[variable]
			name=eight_x26y13
			equals=2
		[/variable]
		[variable]
			name=eight_x28y12
			equals=3
		[/variable]
		[variable]
			name=eight_x26y15
			equals=4
		[/variable]
		[variable]
			name=eight_x28y14
			equals=5
		[/variable]
		[variable]
			name=eight_x30y13
			equals=6
		[/variable]
		[and]
			[variable]
				name=eight_x28y16
				equals=7
			[/variable]
			[variable]
				name=eight_x30y15
				equals=8
			[/variable]
			[or]
				[variable]
					name=eight_x30y15
					equals=7
				[/variable]
				[variable]
					name=eight_x32y14
					equals=8
				[/variable]
			[/or]
			[or]
				[variable]
					name=eight_x28y16
					equals=7
				[/variable]
				[variable]
					name=eight_x32y14
					equals=8
				[/variable]
			[/or]
		[/and]
		[then]
			{NEXT_PUZZLE}
			{INIT_SUDOKU}
		[/then]
	[/if]
[/event]

#define GOTO_RAAJAL
	[kill]
		side=1
		[not]
			description=Randalf
		[/not]
		animate=yes
	[/kill]
	{MOVE_UNIT (description=Randalf) 10 5}
#enddef

[event]
	name=moveto
	first_time_only=no
	[filter]
		description=Randalf	
	[/filter]
	{MODIFY_UNIT (description=Randalf) moves 30}
[/event]

#Sokoban: victory when all spiders are on webs
[event]
	name=attack
	first_time_only=no
	[filter]
		description=Randalf
	[/filter]
	[filter_second]
		type=Giant Spider
	[/filter_second]
	[store_locations]
		variable=locs
		x=$x1
		y=$y1
		radius=1
	[/store_locations]
	{FOREACH locs i}
		{VARIABLE_OP x to_variable locs[$i].x}
		{VARIABLE_OP y to_variable locs[$i].y}
		[if]
			[variable]
				name=x
				equals=$x2
			[/variable]
			[variable]
				name=y
				equals=$y2
			[/variable]
			[then]
				{VARIABLE index $i}
				{VARIABLE i 100}
			[/then]
		[/if]
	{NEXT i}
	[store_locations]
		variable=locs
		x=$x2
		y=$y2
		radius=1
	[/store_locations]
	{VARIABLE_OP x to_variable locs[$index].x}
	{VARIABLE_OP y to_variable locs[$index].y}
	[if]
		[have_location]
			x=$x
			y=$y
			terrain=Uu
		[/have_location]
		[then]
			#Move the spider in the direction it was attacked
			{MOVE_UNIT (
				x=$x2
				y=$y2) $x $y}

			#If all 8 spiders on webs, go to 8-puzzle
			{STORE_UNITS store (
				type=Giant Spider
				x=31,33,33,35,36,37,38,39
				y=17,16,19,20,16,20,17,19) no}
			[if]
				[variable]
					name=store.length
					equals=8
				[/variable]
				[then]
					#Get rid of spiders
					[kill]
						type=Giant Spider
						animate=yes
					[/kill]

					#Move Randalf to the bridge
					{MOVE_UNIT (description=Randalf) 31 16}

					#Start eight-puzzle
					{NEXT_PUZZLE}
					{INIT_EIGHT_PUZZLE}
				[/then]
			[/if]
			{CLEAR_VARIABLE store}
		[/then]
	[/if]
	{MODIFY_UNIT (description=Randalf) moves 30}
	{MODIFY_UNIT (description=Randalf) attacks_left 1}
[/event]

#Randalf loses a turn when he's hit
[event]
	name=defender_hits
	first_time_only=no
	[filter]
		description=Randalf
	[/filter]
	{STORE_UNIT_VAR (description=Randalf) moves moves}
	[if]	
		[variable]
			name=moves
			greater_than=0
		[/variable]
		[then]
			{MODIFY_UNIT (description=Randalf) moves 0}
			{MODIFY_UNIT (description=Randalf) attacks_left 0}
		[/then]
	[/if]
[/event]

#define INIT_SOKOBAN
	{SHOW_OBJECTIVE}

	#If you're restarting the puzzle, you lose your turn
	[if]
		[have_unit]
			type=Giant Spider
		[/have_unit]
		[then]
			#Randalf loses his turn
			{MODIFY_UNIT (description=Randalf) moves 0}
			[kill]
				type=Giant Spider
				animate=yes
			[/kill]
		[/then]
	[/if]

	{CREATE_SOKOBAN_SPIDER 32 16}
	{CREATE_SOKOBAN_SPIDER 33 17}
	{CREATE_SOKOBAN_SPIDER 33 18}
	{CREATE_SOKOBAN_SPIDER 35 17}
	{CREATE_SOKOBAN_SPIDER 34 19}
	{CREATE_SOKOBAN_SPIDER 37 17}
	{CREATE_SOKOBAN_SPIDER 36 19}
	{CREATE_SOKOBAN_SPIDER 38 18}
	{VARIABLE loading_puzzle no}

#enddef

#define INIT_EIGHT_PUZZLE

	#If Randalf is on the bridge, then he is restarting the puzzle
	[if]
		[have_unit]
			x,y=31,16
		[/have_unit]
		[then]
			#Kill the skeletons
			[kill]
				side=2
				x,y=25-31,13-16
			[/kill]
		[/then]
		#Otherwise, he is starting the puzzle for the first time
		[else]
			#Destroy sokoban
			[kill]
				type=Giant Spider
				animate=yes
			[/kill]

			#Make sokoban entrance bridge impassable
			[terrain]
				x,y=39,20
				terrain=Qxu^BsV\
			[/terrain]

			#Move Randalf to the bridge
			{MOVE_UNIT (description=Randalf) 31 16}

			#Randalf loses his turn
			{MODIFY_UNIT (description=Randalf) moves 0}
		[/else]
	[/if]	

	#Show the hexes in correct order
	[scroll_to]
		x,y=28,14
	[/scroll_to]
	{SET_EIGHT_HEX 32 14 0}
	{SET_EIGHT_HEX 24 14 1}
	{SET_EIGHT_HEX 26 13 2}
	{SET_EIGHT_HEX 28 12 3}
	{SET_EIGHT_HEX 26 15 4}
	{SET_EIGHT_HEX 28 14 5}
	{SET_EIGHT_HEX 30 13 6}
	{SET_EIGHT_HEX 28 16 7}
	{SET_EIGHT_HEX 30 15 8}
	[redraw] [/redraw]
	[delay]
		time=1500
	[/delay]

	{SHOW_OBJECTIVE}

	{VARIABLE empty_hex.x 32}
	{VARIABLE empty_hex.y 14}

	{VARIABLE num_swaps 12}

#ifdef NORMAL
	{VARIABLE num_swaps 18}
#endif

#ifdef HARD
	{VARIABLE num_swaps 24}
#endif

	{VARIABLE x_bridge 0}
	{VARIABLE y_bridge 0}

	#Shuffle the hexes
	[while]
		[variable]
			name=num_swaps
			greater_than=0
		[/variable]
		[do]
			{VARIABLE_OP num_swaps add -1}

			#Store the bridges surrounding the empty hex
			[store_locations]
				variable=locs
				terrain=Qxu^BsV*
				[and] #Don't choose the previous bridge
					[not]
						x=$x_bridge
						y=$y_bridge
					[/not]
				[/and]
				[and] #Skip the bridge leading to Susoku
					[not]
						x,y=25,13
					[/not]
				[/and]
				[and] #Skip the bridge from Sokoban
					[not]
						x,y=31,16
					[/not]
				[/and]
				[and] #Search hexes surrounding the current empty hex
					x=$empty_hex.x
					y=$empty_hex.y
					radius=1
				[/and]
			[/store_locations]

			#Select a random bridge
			{VARIABLE_OP thing format (1..$locs.length)}
			{RANDOM $thing}
			{VARIABLE_OP random add -1}
			{VARIABLE_OP x_bridge to_variable locs[$random].x}
			{VARIABLE_OP y_bridge to_variable locs[$random].y}

			#Store the nonempty hex across the bridge
			[store_locations]
				variable=locs
				terrain=Y3
				[and]
					x=$x_bridge
					y=$y_bridge
					radius=1
				[/and]
			[/store_locations]

			{VARIABLE x_swap $locs[0].x}
			{VARIABLE y_swap $locs[0].y}
			{VARIABLE_OP value_swap to_variable eight_x$x_swap|y$y_swap}

			{SET_EIGHT_HEX $empty_hex.x $empty_hex.y $value_swap}
			{SET_EIGHT_HEX $x_swap $y_swap 0}

			{VARIABLE empty_hex.x $x_swap}
			{VARIABLE empty_hex.y $y_swap}

			[redraw] [/redraw]
			[delay]
				time=500
			[/delay]

		[/do]
	[/while]

	#Move the non-blood location in front of Randalf
	{VARIABLE debug_iterations 12}
	[while]
		[not]
			[variable]
				name=eight_randalf.x
				equals=30
			[/variable]
			[variable]
				name=eight_randalf.y
				equals=15
			[/variable]
		[/not]
		[variable]
			name=debug_iterations
			greater_than=0
		[/variable]
		[do]
			{VARIABLE_OP debug_iterations add -1}

			#Store the bridges surrounding the empty hex
			[store_locations]
				variable=locs
				terrain=Qxu^BsV*
				[and] #Skip the bridge leading to Sudoku
					[not]
						x,y=25,13
					[/not]
				[/and]
				[and] #Skip the bridge from Sokoban
					[not]
						x,y=31,16
					[/not]
				[/and]
				[and] #Search hexes surrounding the current empty hex
					x=$eight_randalf.x
					y=$eight_randalf.y
					radius=1
				[/and]
			[/store_locations]
			{VARIABLE n $locs.length}
			{VARIABLE_OP n add -1}

			{VARIABLE_OP x_bridge to_variable locs[$n].x}
			{VARIABLE_OP y_bridge to_variable locs[$n].y}

			#Store the nonempty hex across the bridge
			[store_locations]
				variable=locs
				terrain=Y3
				[and]
					x=$x_bridge
					y=$y_bridge
					radius=1
				[/and]
			[/store_locations]

			{VARIABLE x_swap $locs[0].x}
			{VARIABLE y_swap $locs[0].y}
			{VARIABLE_OP value_swap to_variable eight_x$x_swap|y$y_swap}

			{SET_EIGHT_HEX $eight_randalf.x $eight_randalf.y $value_swap}
			{SET_EIGHT_HEX $x_swap $y_swap 0}
		[/do]
	[/while]

	#Spawn skeletons on bridges surrounding Randalf's location
	{EIGHT_SKELETON_SPAWN}
#enddef

#define INIT_SUDOKU
	{VARIABLE sudoku_can_recruit yes}

	#If Randalf is on the bridge, then he is restarting the puzzle
	[if]
		[have_unit]
			x,y=25,13
		[/have_unit]
		[then]
			#Kill the sudoku skeletons
			[kill]
				side=1
				[not]
					description=Randalf
				[/not]
			[/kill]
			[kill]
				side=4
			[/kill]
		[/then]
		#Otherwise, he is starting the puzzle for the first time
		[else]
			#Destroy eight-puzzle skeletons
			[kill]
				side=2
				x,y=25-31,13-16
			[/kill]
			#Make 8-puzzle bridges passable
			[terrain]
				x=25,25,27,27,29,29,31
				y=13,15,14,16,13,15,14
				terrain=Qxu^Bs\
			[/terrain]
			[terrain]
				x=25,27,27,29,29,31
				y=14,13,15,14,16,15
				terrain=Qxu^Bs/
			[/terrain]

			#Make all blood terrains passable
			[terrain]
				terrain=Y2
				x=24,24,26,26,28,28,28,30,30,32
				y=12,14,13,15,12,14,16,13,15,14
			[/terrain]

			#You can't use the village any more
			[terrain]
				x=$eight_randalf.x
				y=$eight_randalf.y
				terrain=Uu
			[/terrain]

			#Make 8-puzzle entrance bridge impassable
			[terrain]
				x,y=31,16
				terrain=Qxu^BsV\
			[/terrain]

			[redraw] [/redraw]
				
			#Move Randalf to the bridge
			{MOVE_UNIT (description=Randalf) 25 13}

			#Randalf loses his turn
			{MODIFY_UNIT (description=Randalf) moves 0}
		[/else]
	[/if]	

	{SHOW_OBJECTIVE}
	
	#Kill skeletons
	[kill]
		side=2
		x,y=25-31,13-16
	[/kill]

	{LOAD_SUDOKU1}
	{VARIABLE loading_puzzle no}

	[teleport]
		[filter]
			description=Randalf
		[/filter]
		x,y=24,12
	[/teleport]
#enddef

#define INIT_RANDALF
	[event]
		name=prestart

		#Sokoban
		{VARIABLE puzzle 1}
		{INIT_SOKOBAN}

		#Sudoku
		{VARIABLE sudoku_unit_1 Skeleton}
		{VARIABLE sudoku_unit_2 (Skeleton Archer)}
		{VARIABLE sudoku_unit_3 Chocobone}
		{VARIABLE sudoku_unit_4 (Bone Shooter)}
		{VARIABLE sudoku_unit_5 Revenant}
		{VARIABLE sudoku_unit_6 Deathblade}
		{VARIABLE sudoku_unit_7 (Death Knight)}
		{VARIABLE sudoku_unit_8 Draug}
		{VARIABLE sudoku_unit_9 (Skeletal Dragon)}
			
		[store_locations]
			variable=sudoku_locs
			x,y=8-28,4-14
			terrain=Rr
		[/store_locations]

		#Units
		{UNSTORE_AT randalf_store 1 39 20}
		{UNSTORE_AT raajal_store 2 6 3}
		{UNIT_CREATE (Ancient Lich) Khal ( _ "Khal") 2 5 4 ()}
		{UNIT_CREATE (Ancient Lich) Elrich ( _ "Elrich") 2 7 3 ()}
	
		#Prisoners
		{NOTRAIT_UNIT 3 Peasant 5 6}
		{NOTRAIT_UNIT 3 Woodsman 6 5}
		{NOTRAIT_UNIT 3 Peasant 7 5}
		{NOTRAIT_UNIT 3 Woodsman 8 4}
		{NOTRAIT_UNIT 3 Peasant 9 4}
		{NOTRAIT_UNIT 3 Woodsman 10 3}
		{NOTRAIT_UNIT 3 Peasant 11 3}

		{MODIFY_UNIT (description=Randalf) facing sw}
		{MODIFY_UNIT (description=Raajal) facing se}
	[/event]
#enddef

#Sudoku: Randalf can recruit at the beginning of a turn
[event]
	name=new turn
	first_time_only=no
	{VARIABLE sudoku_can_recruit yes}
[/event]

#Randalf dies: Raajal will be at the Red Sea in 16 hours
[event]
	name=die
	[filter]
		description=Randalf
	[/filter]
	{END_RANDALF}
[/event]

#Time over: Randalf will continue this mission tomorrow
[event]
	name=time over
	{END_RANDALF}
[/event]

[event]
	name=victory

	#Randalf finished all puzzles
	[if]
		[variable]
			name=puzzle
			equals=4
		[/variable]
		[then]
			
			#Make Raajal's bridge passable
			[terrain]
				x,y=11,6
				terrain=Qxu^Bs\
			[/terrain]
			[redraw] [/redraw]

			{MOVE_UNIT description=Randalf 12 6}
			{MOVE_UNIT description=Randalf 10 5}
			
			{UNIT_MSG (description=Raajal) ( _ "There is just one more task, Randalf.")}
			{UNIT_MSG (description=Randalf) ( _ "What must I do?")}
			{UNIT_MSG (description=Raajal) ( _ "Kill the human scum standing before you. Kill them all!")}
			{UNIT_MSG (type=Peasant) ( _ "Sir, please... I have a wife and daughter... Don't do it!")}

			#Raajal and Randalf will reach the Red Sea in 16 hours
			{VARIABLE raajal_randalf_arrive_hour $hour_number}
			{VARIABLE_OP raajal_randalf_arrive_hour add $turn_number}
			{VARIABLE_OP raajal_randalf_arrive_hour add 16}

			{CLEAR_VARIABLE randalf_training_store}

			{STORE_UNITS raajal_store (description=Raajal) no}
			{STORE_UNITS lich_store (type=Ancient Lich) no}
			{STORE_UNITS randalf_store (description=Randalf) no}
			{STORE_UNITS randalf_kills_store (side=3) no}
		[/then]
		[else]
			#Randalf is not finished
			[if]
				[have_unit]
					description=Randalf
				[/have_unit]
				[then]
					{STORE_UNITS randalf_training_store () no}
				[/then]
				#Randalf is dead
				[else]
					{UNIT_MSG (description=Raajal) ( _ "I guess I was wrong about you, Randalf.")}
					{UNIT_MSG (description=Raajal) ( _ "Bring me his corpse.")}
					{UNIT_MSG (description=Khal) ( _ "Yes, master.")}

					#Raajal and liches will reach the Red Sea in 16 hours
					{VARIABLE raajal_arrive_hour $hour_number}
					{VARIABLE_OP raajal_arrive_hour add $turn_number}
					{VARIABLE_OP raajal_arrive_hour add 16}

					{CLEAR_VARIABLE randalf_training_store}

					#Store Raajal and liches
					{STORE_UNITS raajal_store (description=Raajal) no}
					{STORE_UNITS lich_store (type=Ancient Lich) no}
				[/else]
			[/if]
		[/else]
	[/if]
[/event]